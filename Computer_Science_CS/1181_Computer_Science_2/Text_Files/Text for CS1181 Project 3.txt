/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cs1181simulationproject;

/**
 *
 * @author FoxM
 */
public class CheckOutLaneClass {
    double checkOutTime = 0;
    int checkOutLaneLength;
    int totalCostumerServiced;
    double timeForCostumerPayment;
    int timeToCheckOut;
    int maxumumCheckOutLane;
    int totalCostumersWaiting;
    int totalWaitTime;
    int lastCostumerWaitTime;
    
    /**
     * This CheckOutLaneClass constructor is used to call the check out time and the time it take for the costumer to pay 
     * @param checkOutTime the amount of time it takes for the customer to check out
     * @param timeForCostumerPayment the time for when the customer pays and leaves
     */
    public CheckOutLaneClass(double checkOutTime, double timeForCostumerPayment){
        this.checkOutTime = checkOutTime;
        this.timeForCostumerPayment = timeForCostumerPayment;
    }
    
    /**
     * this method gets the time to check out
     * @return
     */
    public int gettimeToCheckOut(){
        return timeToCheckOut;
    }
    
    /**
     * this method gets the wait line length
     * @return
     */
    public int getWaitingLineLength(){
        return checkOutLaneLength;
    }
    
    /**
     * this method gets the total costumer wait time
     * @return
     */
    public int gettotalCostumerWaitTime(){
        return totalCostumersWaiting;
    }
    
    /**
     * this method returns the max line length
     * @return
     */
    public int getmaximumLneLength(){
        return maxumumCheckOutLane;
    }
    
    /**
     * this method gets the number of costumers served
     * @return
     */
    public int gettotalCostumerServiced(){
        return totalCostumerServiced;
    }
    /**
     * This check out lane method is used finding how long the check how long it takes to serve each costumer
     * @param checkOutTime the amount of time it take for a costumer to check out
     * @param checkOutLaneLength the length of the check out lane
     * @param maximumCheckOutLane the max length of the check out lane
     * @return returns the checkOutTime
     */
    public int checkOutLane(int checkOutTime, int checkOutLaneLength, int maximumCheckOutLane){
        for(checkOutLaneLength = 0; checkOutLaneLength <= maximumCheckOutLane; checkOutLaneLength++){
            checkOutTime++;
        }
        return checkOutTime;
    }
    
    /**
     * 
     * @param list
     * @return
     * @throws java.lang.Exception
     */
    public OrderedCustomerList removeCostumerFromList(OrderedCustomerList list) throws Exception{
        while(timeToCheckOut == checkOutTime){
            System.out.println(list.getNext());
        }
        return list;
    }
    
    /**
     *
     * @return
     */
    @Override
    public String toString(){
        String output;
        output = "Here is all the information on the Check Out Lanes: ";
        return output;
    }
    
    
    
}



















/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cs1181simulationproject;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

/**
 *
 * @author FoxM
 */
public final class SimulationManager {

    public SimulationManager() throws FileNotFoundException, Exception {
        File costumerlist = new File("CostumerArrivals.txt");
        File checkoutlane = new File("CheckoutLanes.txt");

        OrderedCustomerList list = new OrderedCustomerList();
        CheckOutLaneClass[] regular, express;
        Scanner keyBoard = new Scanner(costumerlist);
        Scanner keyBoard2 = new Scanner(checkoutlane);

        int index = keyBoard2.nextInt();
        costumerPass(list, keyBoard);
        regular = checkoutLane(keyBoard2);
        express = checkoutLane(keyBoard2);
        dumpData(list, keyBoard, keyBoard2);

    }

    /**
     *
     * @param list
     * @param keyBoard
     * @throws java.lang.Exception
     */
    public void costumerPass(OrderedCustomerList list, Scanner keyBoard) throws Exception {
        while (keyBoard.hasNext()) {
            Customer shopper = new Customer(keyBoard.nextInt(), keyBoard.nextDouble(), keyBoard.nextDouble());
            list.insert(shopper);
        }
    }

    /**
     * 
     * @param keyBoard2
     * @return
     */
    public CheckOutLaneClass[] checkoutLane(Scanner keyBoard2) {

        CheckOutLaneClass[] lane = new CheckOutLaneClass[keyBoard2.nextInt()];

        for (int i = 0; i < lane.length; i++) {
            lane[i] = new CheckOutLaneClass(keyBoard2.nextDouble(), keyBoard2.nextDouble());
            System.out.println("testing " + i);
        }
        return lane;
    }

    /**
     * This dumpData method is used to print out all the information from the files
     * @param list used to print the costumer data
     * @param keyBoard also used to print the costumer data
     * @param keyBoard2 used to print the check out lane data
     */
    public void dumpData(OrderedCustomerList list, Scanner keyBoard, Scanner keyBoard2) {

        for (int i = 0; i < regular.length; i++) {

            System.out.println("These are the regular checkout lanes: " + keyBoard2);
        }

        for (int j = 0; j < express.length; j++) {

            System.out.println("These are the express checkout lanes: " + keyBoard2);
        }

        System.out.println("This is the costumer data: " + list);
    }

}
